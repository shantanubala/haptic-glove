
HapticGlove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  000007dc  00000870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800240  00800240  000009b0  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000023f  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000780  00000000  00000000  00000c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000351  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076a  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ae  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e3  00000000  00000000  0000229a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 37       	cpi	r26, 0x77	; 119
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
  9e:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <data_direction_setup>:

	//note that 1 means the pin  is output, and 0 means it's input
	
	//the `or` prevents us from previous assignment
	
	DDRB |= _BV(DDB0) | _BV(DDB1) | _BV(DDB6) | _BV(DDB7);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	83 6c       	ori	r24, 0xC3	; 195
  aa:	84 b9       	out	0x04, r24	; 4
	DDRC |= _BV(DDC0) | _BV(DDC1) | _BV(DDC2) | _BV(DDC3) | _BV(DDC5); // Pin 5 of port C is used for debug LED
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8f 62       	ori	r24, 0x2F	; 47
  b0:	87 b9       	out	0x07, r24	; 7
	DDRD |= _BV(DDD2) | _BV(DDD3) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6) | _BV(DDD7);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	8c 6f       	ori	r24, 0xFC	; 252
  b6:	8a b9       	out	0x0a, r24	; 10
}
  b8:	08 95       	ret

000000ba <motor_switch>:
 * //this would turn on the motor located on port C2
 * motor_switch(PORTC0, &PORTC, 1);
 *
 */
//NOTE: see 
void motor_switch (uint8_t port, uint8_t* portset, uint8_t turnOn ) {
  ba:	38 2f       	mov	r19, r24
  bc:	fb 01       	movw	r30, r22
  be:	20 81       	ld	r18, Z
	if (turnOn) {
  c0:	44 23       	and	r20, r20
  c2:	49 f0       	breq	.+18     	; 0xd6 <motor_switch+0x1c>
		//we want motors to run simultaneously
		*portset |= _BV(port);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <motor_switch+0x14>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	3a 95       	dec	r19
  d0:	e2 f7       	brpl	.-8      	; 0xca <motor_switch+0x10>
  d2:	28 2b       	or	r18, r24
  d4:	09 c0       	rjmp	.+18     	; 0xe8 <motor_switch+0x2e>
	}
	else {
		//the tilda (~) inverts the BV value, so we use
		// AND-EQUAL to avoid turning on more motors
		*portset &= ~_BV(port);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <motor_switch+0x26>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	3a 95       	dec	r19
  e2:	e2 f7       	brpl	.-8      	; 0xdc <motor_switch+0x22>
  e4:	80 95       	com	r24
  e6:	28 23       	and	r18, r24
  e8:	20 83       	st	Z, r18
  ea:	08 95       	ret

000000ec <kill_all_motors>:
//if something goes horribly wrong
//try and input the command for this function ASAP
//TODO: shorten this code
void kill_all_motors() {
	//kill all port B
	PORTB &= ~_BV(PORTB0);
  ec:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~_BV(PORTB1);
  ee:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~_BV(PORTB6);
  f0:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~_BV(PORTB7);
  f2:	2f 98       	cbi	0x05, 7	; 5
	
	//kill all port C
	PORTC &= ~_BV(PORTC0);
  f4:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~_BV(PORTC1);
  f6:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~_BV(PORTC2);
  f8:	42 98       	cbi	0x08, 2	; 8
	PORTC &= ~_BV(PORTC3);
  fa:	43 98       	cbi	0x08, 3	; 8
	
	//kill all port D
	PORTD &= ~_BV(PORTD2);
  fc:	5a 98       	cbi	0x0b, 2	; 11
	PORTD &= ~_BV(PORTD3);
  fe:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~_BV(PORTD4);
 100:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD5);
 102:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD6);
 104:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~_BV(PORTD7);
 106:	5f 98       	cbi	0x0b, 7	; 11
}
 108:	08 95       	ret

0000010a <define_all_motors>:
const char EnterMotor[43] = "\r\nEnter a single motor (A-N) for vibration ";

motor all_motors[14];

void define_all_motors() {
	all_motors[0].port = PORTB0;
 10a:	10 92 48 02 	sts	0x0248, r1
	all_motors[0].portset = &PORTB;
 10e:	45 e2       	ldi	r20, 0x25	; 37
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	50 93 4a 02 	sts	0x024A, r21
 116:	40 93 49 02 	sts	0x0249, r20
					
	all_motors[1].port = PORTD7;
 11a:	67 e0       	ldi	r22, 0x07	; 7
 11c:	60 93 4b 02 	sts	0x024B, r22
	all_motors[1].portset = &PORTD;
 120:	2b e2       	ldi	r18, 0x2B	; 43
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	30 93 4d 02 	sts	0x024D, r19
 128:	20 93 4c 02 	sts	0x024C, r18
	
	all_motors[2].port = PORTD6;
 12c:	96 e0       	ldi	r25, 0x06	; 6
 12e:	90 93 4e 02 	sts	0x024E, r25
	all_motors[2].portset = &PORTD;
 132:	30 93 50 02 	sts	0x0250, r19
 136:	20 93 4f 02 	sts	0x024F, r18
	
	all_motors[3].port = PORTD5;
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	80 93 51 02 	sts	0x0251, r24
	all_motors[3].portset = &PORTD;
 140:	30 93 53 02 	sts	0x0253, r19
 144:	20 93 52 02 	sts	0x0252, r18
	
	all_motors[4].port = PORTB7;
 148:	60 93 54 02 	sts	0x0254, r22
	all_motors[4].portset = &PORTB;
 14c:	50 93 56 02 	sts	0x0256, r21
 150:	40 93 55 02 	sts	0x0255, r20

	all_motors[5].port = PORTB6;
 154:	90 93 57 02 	sts	0x0257, r25
	all_motors[5].portset = &PORTB;
 158:	50 93 59 02 	sts	0x0259, r21
 15c:	40 93 58 02 	sts	0x0258, r20

	all_motors[6].port = PORTD4;
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	80 93 5a 02 	sts	0x025A, r24
	all_motors[6].portset = &PORTD;
 166:	30 93 5c 02 	sts	0x025C, r19
 16a:	20 93 5b 02 	sts	0x025B, r18

	all_motors[7].port = PORTD3;
 16e:	73 e0       	ldi	r23, 0x03	; 3
 170:	70 93 5d 02 	sts	0x025D, r23
	all_motors[7].portset = &PORTD;
 174:	30 93 5f 02 	sts	0x025F, r19
 178:	20 93 5e 02 	sts	0x025E, r18

	all_motors[8].port = PORTD2;
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	60 93 60 02 	sts	0x0260, r22
	all_motors[8].portset = &PORTD;
 182:	30 93 62 02 	sts	0x0262, r19
 186:	20 93 61 02 	sts	0x0261, r18

	all_motors[9].port = PORTB1;
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	20 93 63 02 	sts	0x0263, r18
	all_motors[9].portset = &PORTB;
 190:	50 93 65 02 	sts	0x0265, r21
 194:	40 93 64 02 	sts	0x0264, r20

	all_motors[10].port = PORTC0;
 198:	10 92 66 02 	sts	0x0266, r1
	all_motors[10].portset = &PORTC;
 19c:	88 e2       	ldi	r24, 0x28	; 40
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 68 02 	sts	0x0268, r25
 1a4:	80 93 67 02 	sts	0x0267, r24

	all_motors[11].port = PORTC1;
 1a8:	20 93 69 02 	sts	0x0269, r18
	all_motors[11].portset = &PORTC;
 1ac:	90 93 6b 02 	sts	0x026B, r25
 1b0:	80 93 6a 02 	sts	0x026A, r24

	all_motors[12].port = PORTC2;
 1b4:	60 93 6c 02 	sts	0x026C, r22
	all_motors[12].portset = &PORTC;
 1b8:	90 93 6e 02 	sts	0x026E, r25
 1bc:	80 93 6d 02 	sts	0x026D, r24
	
	all_motors[13].port = PORTC3;
 1c0:	70 93 6f 02 	sts	0x026F, r23
	all_motors[13].portset = &PORTC;
 1c4:	90 93 71 02 	sts	0x0271, r25
 1c8:	80 93 70 02 	sts	0x0270, r24
}
 1cc:	08 95       	ret

000001ce <menu_display>:
}

//nothing specific here, just call
//we add it as a function so we can call it
//to prompt the user after every input
void menu_display () {
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	c1 ef       	ldi	r28, 0xF1	; 241
 1d4:	d1 e0       	ldi	r29, 0x01	; 1
	static const char menu[74] = "\r\nChoose Motor [A-N: On; a-n: Off]; 'x' to change time; 'r' to read time: ";
	
	//write each individual character in the menu array to serial
	for (int i = 0; i < 74; i++) {
		serialWrite(menu[i]);
 1d6:	89 91       	ld	r24, Y+
 1d8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
//to prompt the user after every input
void menu_display () {
	static const char menu[74] = "\r\nChoose Motor [A-N: On; a-n: Off]; 'x' to change time; 'r' to read time: ";
	
	//write each individual character in the menu array to serial
	for (int i = 0; i < 74; i++) {
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	cb 33       	cpi	r28, 0x3B	; 59
 1e0:	d8 07       	cpc	r29, r24
 1e2:	c9 f7       	brne	.-14     	; 0x1d6 <menu_display+0x8>
		serialWrite(menu[i]);
	}
	
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <get_delay>:
	serialWrite(Read4);

	return (Read1 - 48) * 1000 + (Read2 - 48) * 100 + (Read3 - 48) * 10 + (Read4 - 48);
}

int get_delay() {
 1ea:	bf 92       	push	r11
 1ec:	cf 92       	push	r12
 1ee:	df 92       	push	r13
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cf e5       	ldi	r28, 0x5F	; 95
 1fe:	d1 e0       	ldi	r29, 0x01	; 1
	for (int i = 0; i < 53; i++) {
		serialWrite(TimingDuration[i]);
 200:	89 91       	ld	r24, Y+
 202:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>

	return (Read1 - 48) * 1000 + (Read2 - 48) * 100 + (Read3 - 48) * 10 + (Read4 - 48);
}

int get_delay() {
	for (int i = 0; i < 53; i++) {
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	c4 39       	cpi	r28, 0x94	; 148
 20a:	d4 07       	cpc	r29, r20
 20c:	c9 f7       	brne	.-14     	; 0x200 <get_delay+0x16>
		serialWrite(TimingDuration[i]);
	}

	char Read1, Read2, Read3, Read4;
	Read1 = serialRead();
 20e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 212:	b8 2e       	mov	r11, r24
	serialWrite(Read1);
 214:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	Read2 = serialRead();
 218:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 21c:	c8 2e       	mov	r12, r24
	serialWrite(Read2);
 21e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	Read3 = serialRead();
 222:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 226:	e8 2e       	mov	r14, r24
	serialWrite(Read3);
 228:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	Read4 = serialRead();
 22c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 230:	08 2f       	mov	r16, r24
	serialWrite(Read4);
 232:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
 236:	10 e0       	ldi	r17, 0x00	; 0
 238:	00 5d       	subi	r16, 0xD0	; 208
 23a:	14 41       	sbci	r17, 0x14	; 20
 23c:	84 e6       	ldi	r24, 0x64	; 100
 23e:	c8 9e       	mul	r12, r24
 240:	60 01       	movw	r12, r0
 242:	11 24       	eor	r1, r1
 244:	0c 0d       	add	r16, r12
 246:	1d 1d       	adc	r17, r13
 248:	8a e0       	ldi	r24, 0x0A	; 10
 24a:	e8 9e       	mul	r14, r24
 24c:	70 01       	movw	r14, r0
 24e:	11 24       	eor	r1, r1
 250:	0e 0d       	add	r16, r14
 252:	1f 1d       	adc	r17, r15
 254:	2b 2d       	mov	r18, r11
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	20 53       	subi	r18, 0x30	; 48
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	88 ee       	ldi	r24, 0xE8	; 232
 25e:	93 e0       	ldi	r25, 0x03	; 3
 260:	ac 01       	movw	r20, r24
 262:	24 9f       	mul	r18, r20
 264:	c0 01       	movw	r24, r0
 266:	25 9f       	mul	r18, r21
 268:	90 0d       	add	r25, r0
 26a:	34 9f       	mul	r19, r20
 26c:	90 0d       	add	r25, r0
 26e:	11 24       	eor	r1, r1
 270:	08 0f       	add	r16, r24
 272:	19 1f       	adc	r17, r25

	return (Read1 - 48) * 1000 + (Read2 - 48) * 100 + (Read3 - 48) * 10 + (Read4 - 48);
}
 274:	c8 01       	movw	r24, r16
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	bf 90       	pop	r11
 288:	08 95       	ret

0000028a <get_duration>:
	
	// Convert from ASCII character to number	
	return ((Ready - 48) * 10 + (Readz - 48)) * 8;
}

int get_duration() {
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	c4 e9       	ldi	r28, 0x94	; 148
 29e:	d1 e0       	ldi	r29, 0x01	; 1
	for (int i = 0; i < 50; i++) {
		serialWrite(TimingDelay[i]);
 2a0:	89 91       	ld	r24, Y+
 2a2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	// Convert from ASCII character to number	
	return ((Ready - 48) * 10 + (Readz - 48)) * 8;
}

int get_duration() {
	for (int i = 0; i < 50; i++) {
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	c6 3c       	cpi	r28, 0xC6	; 198
 2aa:	d4 07       	cpc	r29, r20
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <get_duration+0x16>
		serialWrite(TimingDelay[i]);
	}

	char Read1, Read2, Read3, Read4;
	Read1 = serialRead();
 2ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 2b2:	b8 2e       	mov	r11, r24
	serialWrite(Read1);
 2b4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	Read2 = serialRead();
 2b8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 2bc:	c8 2e       	mov	r12, r24
	serialWrite(Read2);
 2be:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	Read3 = serialRead();
 2c2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 2c6:	e8 2e       	mov	r14, r24
	serialWrite(Read3);
 2c8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	Read4 = serialRead();
 2cc:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 2d0:	08 2f       	mov	r16, r24
	serialWrite(Read4);
 2d2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
 2d6:	10 e0       	ldi	r17, 0x00	; 0
 2d8:	00 5d       	subi	r16, 0xD0	; 208
 2da:	14 41       	sbci	r17, 0x14	; 20
 2dc:	84 e6       	ldi	r24, 0x64	; 100
 2de:	c8 9e       	mul	r12, r24
 2e0:	60 01       	movw	r12, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0c 0d       	add	r16, r12
 2e6:	1d 1d       	adc	r17, r13
 2e8:	8a e0       	ldi	r24, 0x0A	; 10
 2ea:	e8 9e       	mul	r14, r24
 2ec:	70 01       	movw	r14, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	0e 0d       	add	r16, r14
 2f2:	1f 1d       	adc	r17, r15
 2f4:	2b 2d       	mov	r18, r11
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	20 53       	subi	r18, 0x30	; 48
 2fa:	30 40       	sbci	r19, 0x00	; 0
 2fc:	88 ee       	ldi	r24, 0xE8	; 232
 2fe:	93 e0       	ldi	r25, 0x03	; 3
 300:	ac 01       	movw	r20, r24
 302:	24 9f       	mul	r18, r20
 304:	c0 01       	movw	r24, r0
 306:	25 9f       	mul	r18, r21
 308:	90 0d       	add	r25, r0
 30a:	34 9f       	mul	r19, r20
 30c:	90 0d       	add	r25, r0
 30e:	11 24       	eor	r1, r1
 310:	08 0f       	add	r16, r24
 312:	19 1f       	adc	r17, r25

	return (Read1 - 48) * 1000 + (Read2 - 48) * 100 + (Read3 - 48) * 10 + (Read4 - 48);
}
 314:	c8 01       	movw	r24, r16
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	ef 90       	pop	r14
 322:	df 90       	pop	r13
 324:	cf 90       	pop	r12
 326:	bf 90       	pop	r11
 328:	08 95       	ret

0000032a <get_off_time>:

	// Convert from ASCII character to number	
	return ((Read1 - 48) * 10 + (Read0 - 48)) * 8;
}

int get_off_time() {
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	cf e2       	ldi	r28, 0x2F	; 47
 334:	d1 e0       	ldi	r29, 0x01	; 1
	// Read the off time
	for (int i=0; i<48; i++)
		serialWrite (TimingOff[i]);
 336:	89 91       	ld	r24, Y+
 338:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	return ((Read1 - 48) * 10 + (Read0 - 48)) * 8;
}

int get_off_time() {
	// Read the off time
	for (int i=0; i<48; i++)
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	cf 35       	cpi	r28, 0x5F	; 95
 340:	d8 07       	cpc	r29, r24
 342:	c9 f7       	brne	.-14     	; 0x336 <get_off_time+0xc>
		serialWrite (TimingOff[i]);
	char Ready = serialRead();
 344:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 348:	08 2f       	mov	r16, r24
	serialWrite (Ready);
 34a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	char Readz = serialRead();
 34e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 352:	18 2f       	mov	r17, r24
	serialWrite (Readz);
 354:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
 358:	21 2f       	mov	r18, r17
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	20 51       	subi	r18, 0x10	; 16
 35e:	32 40       	sbci	r19, 0x02	; 2
 360:	8a e0       	ldi	r24, 0x0A	; 10
 362:	08 9f       	mul	r16, r24
 364:	80 01       	movw	r16, r0
 366:	11 24       	eor	r1, r1
 368:	20 0f       	add	r18, r16
 36a:	31 1f       	adc	r19, r17
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	8a 95       	dec	r24
 374:	e1 f7       	brne	.-8      	; 0x36e <get_off_time+0x44>
	
	// Convert from ASCII character to number	
	return ((Ready - 48) * 10 + (Readz - 48)) * 8;
}
 376:	c9 01       	movw	r24, r18
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <get_on_time>:

const char TimingOn[47] = "\r\nEnter On-Time [1 to 30] (ms) - Ex: 10 or 02: ";
const char TimingOff[48] = "\r\nEnter Off-Time [1 to 30] (ms) - Ex: 10 or 02: ";
const char TimingDuration[53] = "\r\nEnter Duration [1 - 5000] (ms) - Ex: 0001 or 4000: ";
const char TimingDelay[50] = "\r\nEnter Delay [1 - 5000] (ms) - Ex: 0020 or 2000: ";
int get_on_time() {
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	c0 e0       	ldi	r28, 0x00	; 0
 38c:	d1 e0       	ldi	r29, 0x01	; 1
	// Read the on time
	// Three numbers have to be entered for the on time and off time.
	// Starts with the hundred digit, tenth and then the unit digit.

	for (int i=0; i<47; i++)
		serialWrite (TimingOn[i]);
 38e:	89 91       	ld	r24, Y+
 390:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
int get_on_time() {
	// Read the on time
	// Three numbers have to be entered for the on time and off time.
	// Starts with the hundred digit, tenth and then the unit digit.

	for (int i=0; i<47; i++)
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	cf 32       	cpi	r28, 0x2F	; 47
 398:	d8 07       	cpc	r29, r24
 39a:	c9 f7       	brne	.-14     	; 0x38e <get_on_time+0xc>
		serialWrite (TimingOn[i]);
	char Read1 = serialRead();
 39c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 3a0:	08 2f       	mov	r16, r24
	serialWrite (Read1);
 3a2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	char Read0 = serialRead();
 3a6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 3aa:	18 2f       	mov	r17, r24
	serialWrite (Read0);
 3ac:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
 3b0:	21 2f       	mov	r18, r17
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	20 51       	subi	r18, 0x10	; 16
 3b6:	32 40       	sbci	r19, 0x02	; 2
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	08 9f       	mul	r16, r24
 3bc:	80 01       	movw	r16, r0
 3be:	11 24       	eor	r1, r1
 3c0:	20 0f       	add	r18, r16
 3c2:	31 1f       	adc	r19, r17
 3c4:	93 e0       	ldi	r25, 0x03	; 3
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	9a 95       	dec	r25
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <get_on_time+0x44>

	// Convert from ASCII character to number	
	return ((Read1 - 48) * 10 + (Read0 - 48)) * 8;
}
 3ce:	c9 01       	movw	r24, r18
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	08 95       	ret

000003da <get_vibration>:
	
	all_motors[13].port = PORTC3;
	all_motors[13].portset = &PORTC;
}

vibration get_vibration(int num) {
 3da:	af 92       	push	r10
 3dc:	bf 92       	push	r11
 3de:	cf 92       	push	r12
 3e0:	df 92       	push	r13
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	df 93       	push	r29
 3ec:	cf 93       	push	r28
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	2e 97       	sbiw	r28, 0x0e	; 14
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	7c 01       	movw	r14, r24
 400:	d6 2e       	mov	r13, r22
 402:	06 ec       	ldi	r16, 0xC6	; 198
 404:	11 e0       	ldi	r17, 0x01	; 1
	motor mot;
	char mot_id;
	int index;
	int i;
	for (i = 0; i < 43; i++) {
		serialWrite(EnterMotor[i]);
 406:	f8 01       	movw	r30, r16
 408:	81 91       	ld	r24, Z+
 40a:	8f 01       	movw	r16, r30
 40c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
vibration get_vibration(int num) {
	motor mot;
	char mot_id;
	int index;
	int i;
	for (i = 0; i < 43; i++) {
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	01 3f       	cpi	r16, 0xF1	; 241
 414:	1f 07       	cpc	r17, r31
 416:	b9 f7       	brne	.-18     	; 0x406 <get_vibration+0x2c>
		serialWrite(EnterMotor[i]);
	}
	serialWrite((num + 48));
 418:	8d 2d       	mov	r24, r13
 41a:	80 5d       	subi	r24, 0xD0	; 208
 41c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	serialWrite(':');
 420:	8a e3       	ldi	r24, 0x3A	; 58
 422:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
	serialWrite(' ');
 426:	80 e2       	ldi	r24, 0x20	; 32
 428:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>

	mot_id = serialRead();
 42c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 430:	08 2f       	mov	r16, r24
	if (index >= 0 && index < 14) {
		serialWrite(mot_id);
 432:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <serialWrite>
		index = (mot_id - 65);
		mot = all_motors[index];
 436:	10 e0       	ldi	r17, 0x00	; 0
 438:	01 54       	subi	r16, 0x41	; 65
 43a:	10 40       	sbci	r17, 0x00	; 0
 43c:	f8 01       	movw	r30, r16
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	e0 0f       	add	r30, r16
 444:	f1 1f       	adc	r31, r17
 446:	de 01       	movw	r26, r28
 448:	11 96       	adiw	r26, 0x01	; 1
 44a:	e8 5b       	subi	r30, 0xB8	; 184
 44c:	fd 4f       	sbci	r31, 0xFD	; 253
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	01 90       	ld	r0, Z+
 452:	0d 92       	st	X+, r0
 454:	81 50       	subi	r24, 0x01	; 1
 456:	e1 f7       	brne	.-8      	; 0x450 <get_vibration+0x76>

		vibration vib;
		vib.on_time = get_on_time();
 458:	0e 94 c1 01 	call	0x382	; 0x382 <get_on_time>
 45c:	5c 01       	movw	r10, r24
		vib.off_time = get_off_time();
 45e:	0e 94 95 01 	call	0x32a	; 0x32a <get_off_time>
 462:	6c 01       	movw	r12, r24
		vib.delay = get_delay();
 464:	0e 94 f5 00 	call	0x1ea	; 0x1ea <get_delay>
 468:	8c 01       	movw	r16, r24
		vib.duration = get_duration();
 46a:	0e 94 45 01 	call	0x28a	; 0x28a <get_duration>
		vib.motor = mot;
 46e:	d7 01       	movw	r26, r14
 470:	18 96       	adiw	r26, 0x08	; 8
 472:	fe 01       	movw	r30, r28
 474:	31 96       	adiw	r30, 0x01	; 1
 476:	23 e0       	ldi	r18, 0x03	; 3
 478:	01 90       	ld	r0, Z+
 47a:	0d 92       	st	X+, r0
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	e1 f7       	brne	.-8      	; 0x478 <get_vibration+0x9e>

		return vib;
 480:	f7 01       	movw	r30, r14
 482:	b5 82       	std	Z+5, r11	; 0x05
 484:	a4 82       	std	Z+4, r10	; 0x04
 486:	d7 82       	std	Z+7, r13	; 0x07
 488:	c6 82       	std	Z+6, r12	; 0x06
 48a:	13 83       	std	Z+3, r17	; 0x03
 48c:	02 83       	std	Z+2, r16	; 0x02
 48e:	91 83       	std	Z+1, r25	; 0x01
 490:	80 83       	st	Z, r24
	}
	else {
		
	}
}
 492:	c7 01       	movw	r24, r14
 494:	2e 96       	adiw	r28, 0x0e	; 14
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	f8 94       	cli
 49a:	de bf       	out	0x3e, r29	; 62
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	cd bf       	out	0x3d, r28	; 61
 4a0:	cf 91       	pop	r28
 4a2:	df 91       	pop	r29
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	af 90       	pop	r10
 4b4:	08 95       	ret

000004b6 <__vector_11>:
char selection[5];

selectionIndex = 0;

ISR(TIMER1_COMPA_vect)
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
	
}
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <main>:
	
}

int main () {
	//Turn on global interrupts
	sei();
 4ca:	78 94       	sei

	//specify all port directions
	data_direction_setup();
 4cc:	0e 94 53 00 	call	0xa6	; 0xa6 <data_direction_setup>
	
	//sets up baud rates, Rx, Tx, etc.
	setup_serial();
 4d0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <setup_serial>
	
	//welcomes and prompts user
	menu_display();
 4d4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <menu_display>
	//pick whichever prescaler you want based on your
	//were clocking internally at 8M I think?
	//1024 prescaler means 1024 clocks for each count
	//256 counts means 1 overflow
	//8M/1024/40= 195.3125  1/195 =  0.00512  1 overflow every 5.1 ms
 	TCCR0A = _BV(WGM01);
 4d8:	22 e0       	ldi	r18, 0x02	; 2
 4da:	24 bd       	out	0x24, r18	; 36
 	TCCR0B = _BV(CS00) | _BV(CS02);
 4dc:	95 e0       	ldi	r25, 0x05	; 5
 4de:	95 bd       	out	0x25, r25	; 37
 	OCR0A = 250; 
 4e0:	8a ef       	ldi	r24, 0xFA	; 250
 4e2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = _BV(OCIE0A);
 4e4:	20 93 6e 00 	sts	0x006E, r18
	
	//16-bit timer(1)
	TCCR1A = _BV(WGM11);
 4e8:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = _BV(CS10) | _BV(CS12);
 4ec:	90 93 81 00 	sts	0x0081, r25
	OCR1A = 250;
 4f0:	8a ef       	ldi	r24, 0xFA	; 250
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	90 93 89 00 	sts	0x0089, r25
 4f8:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = _BV(OCIE1A);
 4fc:	20 93 6f 00 	sts	0x006F, r18

	for (int i = 0; i < 5; i ++) 
	{
		selection[i] = '-';
 500:	8d e2       	ldi	r24, 0x2D	; 45
 502:	80 93 72 02 	sts	0x0272, r24
 506:	80 93 73 02 	sts	0x0273, r24
 50a:	80 93 74 02 	sts	0x0274, r24
 50e:	80 93 75 02 	sts	0x0275, r24
 512:	80 93 76 02 	sts	0x0276, r24
	//keep prompting the user once operations are finished
	//	using this infinite while loop
	while (1) {
		
		// Read the data from serial port	
		char Read = serialRead();
 516:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <serialRead>
 51a:	fd cf       	rjmp	.-6      	; 0x516 <__stack+0x17>

0000051c <__vector_14>:
	
}


ISR(TIMER0_COMPA_vect)
{
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	2f 93       	push	r18
 528:	3f 93       	push	r19
 52a:	4f 93       	push	r20
 52c:	5f 93       	push	r21
 52e:	6f 93       	push	r22
 530:	7f 93       	push	r23
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
 536:	af 93       	push	r26
 538:	bf 93       	push	r27
 53a:	ef 93       	push	r30
 53c:	ff 93       	push	r31
	if ((PINC >> 5) & 0x01)
 53e:	86 b1       	in	r24, 0x06	; 6
 540:	82 95       	swap	r24
 542:	86 95       	lsr	r24
 544:	87 70       	andi	r24, 0x07	; 7
 546:	80 ff       	sbrs	r24, 0
 548:	0b c0       	rjmp	.+22     	; 0x560 <__vector_14+0x44>
	{
 		// Turn off the debug LED
		motor_switch (PORTC5, &PORTC, 0);
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	68 e2       	ldi	r22, 0x28	; 40
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
		kill_all_motors();    
 556:	0e 94 76 00 	call	0xec	; 0xec <kill_all_motors>
		OCR0A = Off_Time;
 55a:	80 91 3d 02 	lds	r24, 0x023D
 55e:	fe c0       	rjmp	.+508    	; 0x75c <__vector_14+0x240>
	}
	else
	{
	 	// Turn on the debug LED
		motor_switch (PORTC5, &PORTC, 1);    
 560:	85 e0       	ldi	r24, 0x05	; 5
 562:	68 e2       	ldi	r22, 0x28	; 40
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>

		// Count the number of motors that are on. If more than 5 are on, kill all motors
		int MotorCount = 0;
		int i,j;
		for (i=0; i<6; i++)
			MotorCount += ((MRS_Lower >> i) & 0x01);
 56c:	40 91 42 02 	lds	r20, 0x0242
 570:	50 91 43 02 	lds	r21, 0x0243
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	ca 01       	movw	r24, r20
 57e:	02 2e       	mov	r0, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <__vector_14+0x6a>
 582:	95 95       	asr	r25
 584:	87 95       	ror	r24
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <__vector_14+0x66>
 58a:	81 70       	andi	r24, 0x01	; 1
 58c:	90 70       	andi	r25, 0x00	; 0
 58e:	68 0f       	add	r22, r24
 590:	79 1f       	adc	r23, r25
		motor_switch (PORTC5, &PORTC, 1);    

		// Count the number of motors that are on. If more than 5 are on, kill all motors
		int MotorCount = 0;
		int i,j;
		for (i=0; i<6; i++)
 592:	2f 5f       	subi	r18, 0xFF	; 255
 594:	3f 4f       	sbci	r19, 0xFF	; 255
 596:	26 30       	cpi	r18, 0x06	; 6
 598:	31 05       	cpc	r19, r1
 59a:	81 f7       	brne	.-32     	; 0x57c <__vector_14+0x60>
			MotorCount += ((MRS_Lower >> i) & 0x01);
		for (i=0; i<6; i++)
			MotorCount += ((MRS_Upper >> i) & 0x01);
 59c:	e0 91 44 02 	lds	r30, 0x0244
 5a0:	f0 91 45 02 	lds	r31, 0x0245
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	cf 01       	movw	r24, r30
 5aa:	02 2e       	mov	r0, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__vector_14+0x96>
 5ae:	95 95       	asr	r25
 5b0:	87 95       	ror	r24
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <__vector_14+0x92>
 5b6:	81 70       	andi	r24, 0x01	; 1
 5b8:	90 70       	andi	r25, 0x00	; 0
 5ba:	68 0f       	add	r22, r24
 5bc:	79 1f       	adc	r23, r25
		// Count the number of motors that are on. If more than 5 are on, kill all motors
		int MotorCount = 0;
		int i,j;
		for (i=0; i<6; i++)
			MotorCount += ((MRS_Lower >> i) & 0x01);
		for (i=0; i<6; i++)
 5be:	2f 5f       	subi	r18, 0xFF	; 255
 5c0:	3f 4f       	sbci	r19, 0xFF	; 255
 5c2:	26 30       	cpi	r18, 0x06	; 6
 5c4:	31 05       	cpc	r19, r1
 5c6:	81 f7       	brne	.-32     	; 0x5a8 <__vector_14+0x8c>
			MotorCount += ((MRS_Upper >> i) & 0x01);
		
		if (MotorCount > 5)
 5c8:	66 30       	cpi	r22, 0x06	; 6
 5ca:	71 05       	cpc	r23, r1
 5cc:	5c f0       	brlt	.+22     	; 0x5e4 <__vector_14+0xc8>
		{
			kill_all_motors();
 5ce:	0e 94 76 00 	call	0xec	; 0xec <kill_all_motors>
			MRS_Lower = 0;
 5d2:	10 92 43 02 	sts	0x0243, r1
 5d6:	10 92 42 02 	sts	0x0242, r1
			MRS_Upper = 0;
 5da:	10 92 45 02 	sts	0x0245, r1
 5de:	10 92 44 02 	sts	0x0244, r1
 5e2:	ba c0       	rjmp	.+372    	; 0x758 <__vector_14+0x23c>
		}
		else
		{
			motor_switch(PORTB0, &PORTB, ((MRS_Lower & 0x01) == 0x01) );					
 5e4:	41 70       	andi	r20, 0x01	; 1
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	65 e2       	ldi	r22, 0x25	; 37
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTD7, &PORTD, ((MRS_Lower & 0x02) == 0x02) );
 5f0:	40 91 42 02 	lds	r20, 0x0242
 5f4:	50 91 43 02 	lds	r21, 0x0243
 5f8:	56 95       	lsr	r21
 5fa:	47 95       	ror	r20
 5fc:	41 70       	andi	r20, 0x01	; 1
 5fe:	87 e0       	ldi	r24, 0x07	; 7
 600:	6b e2       	ldi	r22, 0x2B	; 43
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTD6, &PORTD, ((MRS_Lower & 0x04) == 0x04) );
 608:	40 91 42 02 	lds	r20, 0x0242
 60c:	50 91 43 02 	lds	r21, 0x0243
 610:	56 95       	lsr	r21
 612:	47 95       	ror	r20
 614:	56 95       	lsr	r21
 616:	47 95       	ror	r20
 618:	41 70       	andi	r20, 0x01	; 1
 61a:	86 e0       	ldi	r24, 0x06	; 6
 61c:	6b e2       	ldi	r22, 0x2B	; 43
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTD5, &PORTD, ((MRS_Lower & 0x08) == 0x08) );
 624:	40 91 42 02 	lds	r20, 0x0242
 628:	50 91 43 02 	lds	r21, 0x0243
 62c:	b3 e0       	ldi	r27, 0x03	; 3
 62e:	56 95       	lsr	r21
 630:	47 95       	ror	r20
 632:	ba 95       	dec	r27
 634:	e1 f7       	brne	.-8      	; 0x62e <__vector_14+0x112>
 636:	41 70       	andi	r20, 0x01	; 1
 638:	85 e0       	ldi	r24, 0x05	; 5
 63a:	6b e2       	ldi	r22, 0x2B	; 43
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTB7, &PORTB, ((MRS_Lower & 0x10) == 0x10) );
 642:	40 91 42 02 	lds	r20, 0x0242
 646:	50 91 43 02 	lds	r21, 0x0243
 64a:	a4 e0       	ldi	r26, 0x04	; 4
 64c:	56 95       	lsr	r21
 64e:	47 95       	ror	r20
 650:	aa 95       	dec	r26
 652:	e1 f7       	brne	.-8      	; 0x64c <__vector_14+0x130>
 654:	41 70       	andi	r20, 0x01	; 1
 656:	87 e0       	ldi	r24, 0x07	; 7
 658:	65 e2       	ldi	r22, 0x25	; 37
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTB6, &PORTB, ((MRS_Lower & 0x20) == 0x20) );
 660:	40 91 42 02 	lds	r20, 0x0242
 664:	50 91 43 02 	lds	r21, 0x0243
 668:	f5 e0       	ldi	r31, 0x05	; 5
 66a:	56 95       	lsr	r21
 66c:	47 95       	ror	r20
 66e:	fa 95       	dec	r31
 670:	e1 f7       	brne	.-8      	; 0x66a <__vector_14+0x14e>
 672:	41 70       	andi	r20, 0x01	; 1
 674:	86 e0       	ldi	r24, 0x06	; 6
 676:	65 e2       	ldi	r22, 0x25	; 37
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTD4, &PORTD, ((MRS_Lower & 0x40) == 0x40) );
 67e:	40 91 42 02 	lds	r20, 0x0242
 682:	50 91 43 02 	lds	r21, 0x0243
 686:	e6 e0       	ldi	r30, 0x06	; 6
 688:	56 95       	lsr	r21
 68a:	47 95       	ror	r20
 68c:	ea 95       	dec	r30
 68e:	e1 f7       	brne	.-8      	; 0x688 <__vector_14+0x16c>
 690:	41 70       	andi	r20, 0x01	; 1
 692:	84 e0       	ldi	r24, 0x04	; 4
 694:	6b e2       	ldi	r22, 0x2B	; 43
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTD3, &PORTD, ((MRS_Upper & 0x01) == 0x01) );
 69c:	40 91 44 02 	lds	r20, 0x0244
 6a0:	41 70       	andi	r20, 0x01	; 1
 6a2:	83 e0       	ldi	r24, 0x03	; 3
 6a4:	6b e2       	ldi	r22, 0x2B	; 43
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTD2, &PORTD, ((MRS_Upper & 0x02) == 0x02) );
 6ac:	40 91 44 02 	lds	r20, 0x0244
 6b0:	50 91 45 02 	lds	r21, 0x0245
 6b4:	56 95       	lsr	r21
 6b6:	47 95       	ror	r20
 6b8:	41 70       	andi	r20, 0x01	; 1
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	6b e2       	ldi	r22, 0x2B	; 43
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTB1, &PORTB, ((MRS_Upper & 0x04) == 0x04) );
 6c4:	40 91 44 02 	lds	r20, 0x0244
 6c8:	50 91 45 02 	lds	r21, 0x0245
 6cc:	56 95       	lsr	r21
 6ce:	47 95       	ror	r20
 6d0:	56 95       	lsr	r21
 6d2:	47 95       	ror	r20
 6d4:	41 70       	andi	r20, 0x01	; 1
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	65 e2       	ldi	r22, 0x25	; 37
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTC0, &PORTC, ((MRS_Upper & 0x08) == 0x08) );
 6e0:	40 91 44 02 	lds	r20, 0x0244
 6e4:	50 91 45 02 	lds	r21, 0x0245
 6e8:	33 e0       	ldi	r19, 0x03	; 3
 6ea:	56 95       	lsr	r21
 6ec:	47 95       	ror	r20
 6ee:	3a 95       	dec	r19
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <__vector_14+0x1ce>
 6f2:	41 70       	andi	r20, 0x01	; 1
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	68 e2       	ldi	r22, 0x28	; 40
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTC1, &PORTC, ((MRS_Upper & 0x10) == 0x10) );
 6fe:	40 91 44 02 	lds	r20, 0x0244
 702:	50 91 45 02 	lds	r21, 0x0245
 706:	24 e0       	ldi	r18, 0x04	; 4
 708:	56 95       	lsr	r21
 70a:	47 95       	ror	r20
 70c:	2a 95       	dec	r18
 70e:	e1 f7       	brne	.-8      	; 0x708 <__vector_14+0x1ec>
 710:	41 70       	andi	r20, 0x01	; 1
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	68 e2       	ldi	r22, 0x28	; 40
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTC2, &PORTC, ((MRS_Upper & 0x20) == 0x20) );
 71c:	40 91 44 02 	lds	r20, 0x0244
 720:	50 91 45 02 	lds	r21, 0x0245
 724:	95 e0       	ldi	r25, 0x05	; 5
 726:	56 95       	lsr	r21
 728:	47 95       	ror	r20
 72a:	9a 95       	dec	r25
 72c:	e1 f7       	brne	.-8      	; 0x726 <__vector_14+0x20a>
 72e:	41 70       	andi	r20, 0x01	; 1
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	68 e2       	ldi	r22, 0x28	; 40
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
			motor_switch(PORTC3, &PORTC, ((MRS_Upper & 0x40) == 0x40) );
 73a:	40 91 44 02 	lds	r20, 0x0244
 73e:	50 91 45 02 	lds	r21, 0x0245
 742:	86 e0       	ldi	r24, 0x06	; 6
 744:	56 95       	lsr	r21
 746:	47 95       	ror	r20
 748:	8a 95       	dec	r24
 74a:	e1 f7       	brne	.-8      	; 0x744 <__vector_14+0x228>
 74c:	41 70       	andi	r20, 0x01	; 1
 74e:	83 e0       	ldi	r24, 0x03	; 3
 750:	68 e2       	ldi	r22, 0x28	; 40
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	0e 94 5d 00 	call	0xba	; 0xba <motor_switch>
		}
		
		OCR0A = On_Time;
 758:	80 91 3b 02 	lds	r24, 0x023B
 75c:	87 bd       	out	0x27, r24	; 39
	}
	
}
 75e:	ff 91       	pop	r31
 760:	ef 91       	pop	r30
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	7f 91       	pop	r23
 76c:	6f 91       	pop	r22
 76e:	5f 91       	pop	r21
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <delayLong>:
//#include <avr/interrupt.h>

#include "SerialCom.h"


void delayLong() {
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
	{ 
		asm("nop");
 784:	00 00       	nop
		delayvar++;
 786:	01 96       	adiw	r24, 0x01	; 1


void delayLong() {
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
 788:	2f ef       	ldi	r18, 0xFF	; 255
 78a:	8d 3d       	cpi	r24, 0xDD	; 221
 78c:	92 07       	cpc	r25, r18
 78e:	d1 f7       	brne	.-12     	; 0x784 <delayLong+0x4>
	{ 
		asm("nop");
		delayvar++;
	} 
}
 790:	08 95       	ret

00000792 <serialCheckRxComplete>:

unsigned char serialCheckRxComplete(void) {
	//return zero if there's nothing to read
	return( UCSR0A & _BV(RXC0));
 792:	80 91 c0 00 	lds	r24, 0x00C0
}
 796:	80 78       	andi	r24, 0x80	; 128
 798:	08 95       	ret

0000079a <serialCheckTxReady>:

unsigned char serialCheckTxReady(void) {
	//return zero if the transmit register is not ready
	return( UCSR0A & _BV(UDRE0) );
 79a:	80 91 c0 00 	lds	r24, 0x00C0
}
 79e:	80 72       	andi	r24, 0x20	; 32
 7a0:	08 95       	ret

000007a2 <serialRead>:
	} 
}

unsigned char serialCheckRxComplete(void) {
	//return zero if there's nothing to read
	return( UCSR0A & _BV(RXC0));
 7a2:	80 91 c0 00 	lds	r24, 0x00C0
	return( UCSR0A & _BV(UDRE0) );
}

unsigned char serialRead(void) {
	//dawdle until we have data to read
	while (serialCheckRxComplete() == 0)
 7a6:	87 ff       	sbrs	r24, 7
 7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <serialRead>
	{;;} 
	return UDR0;
 7aa:	80 91 c6 00 	lds	r24, 0x00C6
}
 7ae:	08 95       	ret

000007b0 <serialWrite>:

void serialWrite(unsigned char DataOut) {
 7b0:	98 2f       	mov	r25, r24
	return( UCSR0A & _BV(RXC0));
}

unsigned char serialCheckTxReady(void) {
	//return zero if the transmit register is not ready
	return( UCSR0A & _BV(UDRE0) );
 7b2:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
}

void serialWrite(unsigned char DataOut) {
	//dawdle until we can transmit data
	while (serialCheckTxReady() == 0)
 7b6:	85 ff       	sbrs	r24, 5
 7b8:	fc cf       	rjmp	.-8      	; 0x7b2 <serialWrite+0x2>
	{;;} 
	UDR0 = DataOut;
 7ba:	90 93 c6 00 	sts	0x00C6, r25
}
 7be:	08 95       	ret

000007c0 <setup_serial>:
int setup_serial (void) {
	//we just need to set the transmit line to '1'
	//	since a bit value of 1 indicates output
	//	we don't need to set the input because it defaults
	//	to 0. OR-EQUAL is used to prevent overwriting other values
	DDRD |= _BV(DDD1);
 7c0:	51 9a       	sbi	0x0a, 1	; 10
	
 	//Set baud rate
	UBRR0H = (unsigned char)(MYUBRR>>8); 
 7c2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) MYUBRR; 
 7c6:	89 e1       	ldi	r24, 0x19	; 25
 7c8:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 
 7cc:	88 e1       	ldi	r24, 0x18	; 24
 7ce:	80 93 c1 00 	sts	0x00C1, r24
	//Frame format: 8data, No parity, 1stop bit
	return 0;
}
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	08 95       	ret

000007d8 <_exit>:
 7d8:	f8 94       	cli

000007da <__stop_program>:
 7da:	ff cf       	rjmp	.-2      	; 0x7da <__stop_program>
